simple-recursion
(let
    (
        (fact (lambda (fact) (lambda (n s) (cond
            ((eq? 1 n) 1)
            (t (* n ((fact fact) (- n s) s))) 
        ))))

        (fact (fact fact))
    )
    (fact 5 2)
)
15

let-scope
(let
    (
        (x 3)
        (y (let ((x 5)) x))
    )

    (list x y)
)
(3 5)

no-arg-lambda
((lambda () 3))
3

; currently broken
; modulo-arith 
; (- 1 2 MODULO)
; 4294967295

arith
(+ 1 2)
3

cond-nil
(let ((nil '())) (cond (nil 1) (t 2)))
2

cond-list-of-empty-list
(cond ('(()) 1) (t 2)) 
1

cond-quote-of-nil
(cond ('() 1) (t 2))
2

cond-nil2
(cond (() 1) (t 2))
2

cond-t
(cond (t 1))
1

cond-quote-t
(cond ('t 1))
1

