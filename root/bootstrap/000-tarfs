(LET
    (
        (nil (QUOTE ()))
        (true (QUOTE T))
        
        (not (LAMBDA (x) (COND
            ((EQ nil x) true)
            (true nil))))
        (and (LAMBDA (x y) (COND
            ((EQ nil x) nil)
            ((EQ nil y) nil)
            (true true))))
        (or (LAMBDA (x y) (COND
            ((EQ nil x) (and y true))
            (true true))))

        (compose (LAMBDA (f g) (LAMBDA (x) (f (g x)))))

        (caar (LAMBDA (seq) (CAR (CAR seq))))
        (cadr (LAMBDA (seq) (CAR (CDR seq))))
        (cdar (LAMBDA (seq) (CDR (CAR seq))))
        (cddr (LAMBDA (seq) (CDR (CDR seq))))

        (pair CONS)
        (pair~ (LAMBDA (x y) (pair y x)))
        (fst CAR)
        (snd CDR)
        (swap (LAMBDA (x) (pair (snd x) (fst x))))

        (map (LAMBDA (fn seq) (LET
            ((map. (LAMBDA (rec seq) (COND
                ((EQ nil seq) nil)
                (true (CONS
                    (fn (CAR seq))
                    (rec rec (CDR seq))))))))
            (map. map. seq))))
        (LIST (LAMBDA (seq) (map EVAL seq)))

        (foldl (LAMBDA (fn z seq) (LET
            ((foldl. (LAMBDA (rec z seq) (COND
                ((EQ nil seq) z)
                (true (rec rec (fn z (CAR seq)) (CDR seq)))))))
            (foldl. foldl. z seq))))
        (foldr (LAMBDA (fn z seq) (LET
            ((foldr. (LAMBDA (rec seq) (COND
                ((EQ nil seq) z)
                (true (fn (CAR seq) (rec rec (CDR seq))))))))
            (foldr. foldr. seq))))
        (reverse (LAMBDA (seq) (foldl pair~ nil seq)))

        (parse-oct (LAMBDA (seq) (foldl (LAMBDA (acc d) (ADD (MUL 8 acc) (SUB d 48))) 0 seq)))

        (tarfs (LET
            (
                (tar-file-ctor. (LAMBDA (rec addr) (LET
                    (
                        (name (PARSE addr))
                        (len (parse-oct (CHARS (SPAN addr 124 11))))
                        (data (SPAN addr 512 len))
                        (skip (BAND (ADD len 511) (BNOT 511)))
                        (next (SPAN addr (ADD skip 512)))
                    )
                    (CONS (pair name data) (rec rec next))
                )))
                (tar-list-ctor. (LAMBDA (rec addr) (COND
                    ((EQ (GETC addr) 0) nil)
                    (true (tar-file-ctor. rec addr)))))
                (tar-list (tar-list-ctor. tar-list-ctor. (PROGRAM)))
                (get-file. (LAMBDA (rec f seq) (COND
                    ((EQ f (caar seq)) (CAR seq))
                    (true (rec rec f (CDR seq))))))
            )
            (LAMBDA (f) (get-file. get-file. f tar-list))
        ))
    )

    (EVAL (PARSE (snd (tarfs (QUOTE bootstrap/001-module)))))

)


(LET 
    (
        (infixl (LAMBDA (seq) (LET (
            (infix. (LAMBDA (rec z seq) (COND
                ((EQ nil seq) z)
                (true (rec rec
                    (CONS (CAR seq)
                    (CONS z
                    (CONS (cadr seq) ())))
                    (cddr seq)
                ))))))
            (infix. infix. (CAR seq) (CDR seq)))))
        (infixr (LAMBDA (seq) (LET (
            (infix. (LAMBDA (rec seq) (COND
                ((EQ nil (CDR seq)) (CAR seq))
                (true 
                    (CONS (cadr seq)
                    (CONS (CAR seq)
                    (CONS (rec rec (cddr seq)) ())))
                ))))) 
            (infix. infix. seq))))
        
        (infixlE (compose EVAL infixl))
        (infixrE (compose EVAL infixr))

        (State (LAMBDA (fn) fn))
        (runState (LAMBDA (s) s))
        (returnS (LAMBDA (x) (State (LAMBDA (s) (pair x s)))))
        (>>=S (LAMBDA (p k) (LAMBDA (s0) (LET
            (
                (xs1 ((runState p) s0))
                (x (fst xs1))
                (s1 (snd xs1))
            )
            ((runState (k x)) s1)))))
        (>>S (LAMBDA (p k) (>>=S p (LAMBDA (_) k))))
        (evalState (LAMBDA (p s) (fst ((runState p) s))))
        (execState (LAMBDA (p s) (snd ((runState p) s))))
        
        (doS. (LAMBDA (seq) (foldr (LAMBDA (e t) (COND
            ((EQ nil t) e)

            ((and (not (ATOM e)) (EQ (QUOTE <-) (CAR e)))
                (LIST (QUOTE (
                    (QUOTE >>=S)
                    (CAR (cddr e))
                (LIST (QUOTE (
                    (QUOTE LAMBDA)
                    (LIST (QUOTE ((cadr e))))
                    t)))))))

            (true
                (LIST (QUOTE (
                    (QUOTE >>=S)
                    (CAR e)
                (LIST (QUOTE (
                    (QUOTE LAMBDA)
                    (LIST (QUOTE ((QUOTE _))))
                    t)))))))
        )) nil seq)))
        (doS (compose EVAL doS.))

        (whileS (LAMBDA (p f) (LET ((whileS. (LAMBDA (rec)
            (doS (QUOTE (
                (<- c p)
                (COND
                    (c (doS (QUOTE (
                        (<- x f)
                        (<- xs (rec rec))
                        (returnS (CONS x xs))
                    ))))
                    (true nil)
                ))))))) (whileS. whileS.))))
        
        (whileS_ (LAMBDA (p f) (LET ((whileS. (LAMBDA (rec)
            (doS (QUOTE (
                (<- c p)
                (COND
                    (c (doS (QUOTE (
                        (f)
                        ((rec rec))
                        (returnS nil)
                    ))))
                    (true nil)
                ))))))) (whileS. whileS.))))
        

        (pfx (LAMBDA (x) (LAMBDA (y) (pair y (CONS x y)))))

        (pcd (doS (QUOTE (
            ((pfx 3))
            (<- l (pfx 1))
            ((pfx 239))
            (returnS l)
        ))))


    )

    (parse-unsigned8 (QUOTE ( 50 49 48 )))


)
    ((runState pcd) (QUOTE (1 2 3 4 5)))

    (E (QUOTE (CONS 1 2)))
    (STR ALFA 32 BETA 35 GAMMA)
        (pce (whileS
            (doS (QUOTE (return (not (EQ 3 (CAR s)) s)))
            (LAMBDA (s) (pair () (CDR s)) )
            ))
    ((returnS 12) (QUOTE (1 2 3)))
            ((pfx 2))
    ( ())

    (doS. (QUOTE (
        (<- a1 coinS)
        (coinS)
        (<- a2 coinS)
        (returnS (pair a1 a2))
    )))
        


    (LIST (QUOTE (
        (QUOTE (1 2 3))
        (reverse (QUOTE (1 2 3)))
        (infixl (QUOTE (1 + 2 + 3)))
        (infixr (QUOTE (1 + 2 + 3))))))

        (whileS (LAMBDA (p f) (LET
            ((whileS. (LAMBDA (rec)
                (infixlE (QUOTE (
                    p >>= (LAMBDA (c) (COND
                        (c (infixE))
                    
                    )))))
            ))
            (whileS. whileS.)
        ))))


    ((returnS 3) 4)

        (scan-while (QUOTE (LAMBDA (cond body seq)
            (LET 
                (
                    (impl (QUOTE (LAMBDA (cond body seq acc)
                        (COND
                            ((EQ nil seq) (pair acc seq))
                            ((not (cond seq)) (pair acc seq))
                            (true (LET
                                (
                                    (res (body seq))
                                    (acc. (CONS (fst res) acc))
                                    (seq. (snd res))
                                )
                                (impl cond body seq. acc.)
                            ))
                        ))))
                    (res (impl cond body seq nil))
                )
                (pair (reverse (fst res)) (snd res))
            )
        )))
        
        (parse-mul (QUOTE (LAMBDA (seq)
            (COND
                ((ATOM (CAR seq)) (LET
                    (
                        (cond (QUOTE (LAMBDA (seq.)
                            (or
                                (EQ (QUOTE *) (CAR seq.))
                                (or 
                                    (EQ (QUOTE div) (CAR seq.))
                                    (EQ (QUOTE mod) (CAR seq.)))
                            ))))
                        (body (QUOTE (LAMBDA (seq.)
                            (COND
                                ((ATOM (cadr seq.)) (CONS (pair (CAR seq.) (cadr seq.)) (cddr seq)))
                            )
                        )))
                        (x (CAR seq))
                        (xs (scan-while cond body (CDR seq)))
                        (expr (QUOTE (LAMBDA (l r)
                            (CONS (fst l) (CONS r (CONS (snd l) nil)))
                        )))
                    )
                    (pair (foldl expr x (fst xs)) (snd xs))
                ))
            )
        )))

        (parse-sum (QUOTE (LAMBDA (seq)
            (COND
                ((ATOM (CAR seq)) (LET
                    (
                        (cond (QUOTE (LAMBDA (seq.)
                            (or
                                (EQ (QUOTE +) (CAR seq.))
                                (EQ (QUOTE -) (CAR seq.))
                            ))))
                        (body (QUOTE (LAMBDA (seq.)
                            (LET
                                ((mul. (parse-mul (CDR seq.))))
                                (CONS (pair (CAR seq.) (fst mul.)) (snd mul.))
                            )
                        )))
                        (x (parse-mul seq))
                        (xs (scan-while cond body (snd x)))
                        (expr (QUOTE (LAMBDA (l r)
                            (CONS (fst l) (CONS r (CONS (snd l) nil)))
                        )))
                    )
                    (pair (foldl expr (fst x) (fst xs)) (snd xs))
                ))
            )
        )))

