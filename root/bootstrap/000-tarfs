; This module is responsible for extremely lightweight parsing of the TAR file.
; The idea is that the whole text of the program is located in root/ directory,
; and it is provided to c.c start file as a .tar file, which is then loaded into
; memory, and begins evaluation at offset 512 (i.e. the first file of a .tar
; archive). We take care to explicitly order files lexicographically when creating
; the archive, and bootstrap/000-tarfs should be the first one in that order.

(LET
    (
        (nil (QUOTE ()))
        (true (QUOTE T))
        
        (not (LAMBDA (x) (COND
            ((EQ nil x) true)
            (true nil))))
        (and (LAMBDA (x y) (COND
            ((EQ nil x) nil)
            ((EQ nil y) nil)
            (true true))))
        (or (LAMBDA (x y) (COND
            ((EQ nil x) (and y true))
            (true true))))

        (compose (LAMBDA (f g) (LAMBDA (x) (f (g x)))))

        (caar (LAMBDA (seq) (CAR (CAR seq))))
        (cadr (LAMBDA (seq) (CAR (CDR seq))))
        (cdar (LAMBDA (seq) (CDR (CAR seq))))
        (cddr (LAMBDA (seq) (CDR (CDR seq))))

        (pair CONS)
        (pair~ (LAMBDA (x y) (pair y x)))
        (fst CAR)
        (snd CDR)
        (swap (LAMBDA (x) (pair (snd x) (fst x))))

        (map (LAMBDA (fn seq) (LET
            ((map. (LAMBDA (rec seq) (COND
                ((EQ nil seq) nil)
                (true (CONS
                    (fn (CAR seq))
                    (rec rec (CDR seq))))))))
            (map. map. seq))))
        (LIST (LAMBDA (seq) (map EVAL seq)))

        (foldl (LAMBDA (fn z seq) (LET
            ((foldl. (LAMBDA (rec z seq) (COND
                ((EQ nil seq) z)
                (true (rec rec (fn z (CAR seq)) (CDR seq)))))))
            (foldl. foldl. z seq))))
        (foldr (LAMBDA (fn z seq) (LET
            ((foldr. (LAMBDA (rec seq) (COND
                ((EQ nil seq) z)
                (true (fn (CAR seq) (rec rec (CDR seq))))))))
            (foldr. foldr. seq))))
        (reverse (LAMBDA (seq) (foldl pair~ nil seq)))

        (parse-oct (LAMBDA (seq) (foldl (LAMBDA (acc d) (ADD (MUL 8 acc) (SUB d 48))) 0 seq)))

        (tarfs (LET
            (
                (tar-file-ctor. (LAMBDA (rec addr) (LET
                    (
                        (name (PARSE addr))
                        (len (parse-oct (CHARS (SPAN addr 124 11))))
                        (data (SPAN addr 512 len))
                        (skip (BAND (ADD len 511) (BNOT 511)))
                        (next (SPAN addr (ADD skip 512)))
                    )
                    (CONS (pair name data) (rec rec next))
                )))
                (tar-list-ctor. (LAMBDA (rec addr) (COND
                    ((EQ (GETC addr) 0) nil)
                    (true (tar-file-ctor. rec addr)))))
                (tar-list. (tar-list-ctor. tar-list-ctor. (PROGRAM)))
                (get-file. (LAMBDA (rec f seq) (COND
                    ((EQ f (caar seq)) (CAR seq))
                    (true (rec rec f (CDR seq))))))
            )
            (LAMBDA (f) (get-file. get-file. f tar-list.))
        ))
    )
    (EVAL (PARSE (snd (tarfs (QUOTE bootstrap/001-module)))))
)

